/*
ðŸ‘‹ Hi! This file was autogenerated by tslint-to-eslint-config.
https://github.com/typescript-eslint/tslint-to-eslint-config

It represents the closest reasonable ESLint configuration to this
project's original TSLint configuration.

We recommend eventually switching this configuration to extend from
the recommended rulesets in typescript-eslint.
https://github.com/typescript-eslint/tslint-to-eslint-config/blob/master/docs/FAQs.md

Happy linting! ðŸ’–
*/

module.exports = {
  env: {
    es6: true,
    node: true
  },

  parser: "@typescript-eslint/parser",
  parserOptions: {
    project: "tsconfig.json",
    sourceType: "module"
  },
  plugins: [
    "eslint-plugin-import",
    "@typescript-eslint",
  ],
  extends: [
    "eslint-config-standard",
    "plugin:@typescript-eslint/recommended",
  ],
  ignorePatterns: [
    '*.d.ts',
    "test/actual",
    "test/expected",
    "test/fixture",
    '.eslintrc.js',
  ],
  rules: {
    'no-console': process.env.NODE_ENV === 'production' ? 'warn' : 'off',
    'no-debugger': process.env.NODE_ENV === 'production' ? 'warn' : 'off',
    'no-plusplus': ['error', { allowForLoopAfterthoughts: true }],
    'no-underscore-dangle': ['error', { allow: ['_id'], allowAfterThis: true }],
    'no-use-before-define': 'off',
    'space-before-function-paren': ['error', {
      anonymous: 'always',
      named: 'never',
      asyncArrow: 'always',
    }],
    'comma-dangle': ['error', {
      arrays: 'always-multiline',
      objects: 'always-multiline',
      imports: 'always-multiline',
      exports: 'always-multiline',
      functions: 'always-multiline',
    }],
    'no-shadow': 'off',
    '@typescript-eslint/no-shadow': ['error'],
    'no-unused-vars': 'off',
    '@typescript-eslint/no-unused-vars': ['error'],
    "@typescript-eslint/no-explicit-any": 'off',
    '@typescript-eslint/explicit-module-boundary-types': 'off',
    // "@typescript-eslint/await-thenable": "error",
    // "@typescript-eslint/consistent-type-assertions": "error",
    // "@typescript-eslint/indent": [
    //   "error",
    //   4,
    //   {
    //     FunctionDeclaration: {
    //       parameters: "first"
    //     },
    //     FunctionExpression: {
    //       parameters: "first"
    //     }
    //   }
    // ],
    // "@typescript-eslint/member-delimiter-style": [
    //   "error",
    //   {
    //     multiline: {
    //       delimiter: "none",
    //       requireLast: true
    //     },
    //     singleline: {
    //       delimiter: "semi",
    //       requireLast: false
    //     }
    //   }
    // ],
    // "@typescript-eslint/naming-convention": "error",
    // "@typescript-eslint/no-empty-function": "error",
    // "@typescript-eslint/no-floating-promises": "error",
    // "@typescript-eslint/no-misused-new": "error",
    // "@typescript-eslint/no-unnecessary-qualifier": "error",
    // "@typescript-eslint/no-unnecessary-type-assertion": "error",
    // "@typescript-eslint/no-unused-expressions": [
    //   "error",
    //   {
    //     allowTaggedTemplates: true,
    //     allowShortCircuit: true
    //   }
    // ],
    // "@typescript-eslint/prefer-namespace-keyword": "error",
    // "@typescript-eslint/quotes": [
    //   "error",
    //   "single",
    //   {
    //     avoidEscape: true
    //   }
    // ],
    // "@typescript-eslint/semi": [
    //   "error",
    //   "never"
    // ],
    // "@typescript-eslint/triple-slash-reference": [
    //   "error",
    //   {
    //     path: "always",
    //     types: "prefer-import",
    //     lib: "always"
    //   }
    // ],
    // "@typescript-eslint/type-annotation-spacing": "error",
    // "@typescript-eslint/unified-signatures": "error",
    // "brace-style": [
    //   "error",
    //   "1tbs"
    // ],
    // "comma-dangle": "error",
    // curly: [
    //   "error",
    //   "multi-line"
    // ],
    // "eol-last": "error",
    // eqeqeq: [
    //   "error",
    //   "smart"
    // ],
    // "id-denylist": [
    //   "error",
    //   "any",
    //   "Number",
    //   "number",
    //   "String",
    //   "string",
    //   "Boolean",
    //   "boolean",
    //   "Undefined",
    //   "undefined"
    // ],
    // "id-match": "error",
    // "import/no-deprecated": "error",
    // indent: "error",
    // "jsdoc/check-alignment": "error",
    // "jsdoc/check-indentation": "error",
    // "jsdoc/newline-after-description": "error",
    // "max-len": "off",
    // "new-parens": "error",
    // "no-caller": "error",
    // "no-cond-assign": "error",
    // "no-constant-condition": "error",
    // "no-control-regex": "error",
    // "no-duplicate-imports": "error",
    // "no-empty": "error",
    // "no-empty-function": "error",
    // "no-eval": "error",
    // "no-fallthrough": "error",
    // "no-invalid-regexp": "error",
    // "no-multiple-empty-lines": "error",
    // "no-redeclare": "error",
    // "no-regex-spaces": "error",
    // "no-return-await": "error",
    // "no-throw-literal": "error",
    // "no-trailing-spaces": "off",
    // "no-underscore-dangle": "error",
    // "no-unused-expressions": "error",
    // "no-unused-labels": "error",
    // "no-var": "error",
    // "one-var": [
    //   "error",
    //   "never"
    // ],
    // quotes: "error",
    // radix: "error",
    // semi: "error",
    // "space-before-function-paren": [
    //   "error",
    //   "always"
    // ],
    // "space-in-parens": [
    //   "error",
    //   "never"
    // ],
    // "spaced-comment": [
    //   "error",
    //   "always",
    //   {
    //     markers: [
    //       "/"
    //     ]
    //   }
    // ],
    // "use-isnan": "error",

    // "@typescript-eslint/tslint/config": [
    //   "error",
    //   {
    //     rules: {
    //       "block-spacing": [
    //         true,
    //         "always"
    //       ],
    //       "brace-style": [
    //         true,
    //         "1tbs",
    //         {
    //           allowSingleLine: true
    //         }
    //       ],
    //       "handle-callback-err": [
    //         true,
    //         "^(err|error)$"
    //       ],
    //       "no-duplicate-case": true,
    //       "no-empty-character-class": true,
    //       "no-ex-assign": true,
    //       "no-extra-boolean-cast": true,
    //       "no-inner-declarations": [
    //         true,
    //         "functions"
    //       ],
    //       "no-multi-spaces": true,
    //       "no-unexpected-multiline": true,
    //       "object-curly-spacing": [
    //         true,
    //         "always"
    //       ],
    //       "strict-type-predicates": true,
    //       "ter-arrow-spacing": [
    //         true,
    //         {
    //           before: true,
    //           after: true
    //         }
    //       ],
    //       "ter-func-call-spacing": [
    //         true,
    //         "never"
    //       ],
    //       "ter-indent": [
    //         true,
    //         2,
    //         {
    //           SwitchCase: 1
    //         }
    //       ],
    //       "ter-no-irregular-whitespace": true,
    //       "ter-no-sparse-arrays": true,
    //       "valid-typeof": true,
    //       whitespace: [
    //         true,
    //         "check-branch",
    //         "check-decl",
    //         "check-operator",
    //         "check-rest-spread",
    //         "check-type",
    //         "check-typecast",
    //         "check-type-operator",
    //         "check-preblock"
    //       ]
    //     }
    //   }
    // ]
  }
};
