/**
 * Schemats takes sql database schema and creates corresponding typescript definitions
 * Created by xiamx on 2016-08-10.
 */

import { generateEnumType, generateTableTypes, generateTableInterface } from './typescript'
import { getDatabase, Database } from './schema'
import Options, { OptionValues } from './options'
import { processString, Options as ITFOptions } from 'typescript-formatter'

// eslint-disable-next-line @typescript-eslint/no-var-requires
const pkgVersion = process.env.npm_package_version // require('package.json').version

function getTime() {
  const padTime = (value: number) => `0${value}`.slice(-2)
  const time = new Date()
  const yyyy = time.getFullYear()
  const MM = padTime(time.getMonth() + 1)
  const dd = padTime(time.getDate())
  const hh = padTime(time.getHours())
  const mm = padTime(time.getMinutes())
  const ss = padTime(time.getSeconds())
  return `${yyyy}-${MM}-${dd} ${hh}:${mm}:${ss}`
}

function buildHeader(db: Database, tables: string[], schema: string | null, options: OptionValues): string {
  const commands = ['schemats', 'generate', '-c', db.connectionString.replace(/:\/\/.*@/, '://username:password@')]
  if (options.camelCase) commands.push('-C')
  if (tables.length > 0) {
    tables.forEach((t: string) => {
      commands.push('-t', t)
    })
  }
  if (schema) {
    commands.push('-s', schema)
  }

  return `/**
         * AUTO-GENERATED FILE @ ${getTime()} - DO NOT EDIT!
         *
         * This file was automatically generated by schemats v.${pkgVersion}
         * $ ${commands.join(' ')}
         *
         */`
}

export async function typescriptOfTable(
  db: Database | string,
  table: string,
  schema: string,
  options: Options,
): Promise<string> {
  if (typeof db === 'string') {
    db = getDatabase(db)
  }

  const interfaces: string[] = []
  const tableTypes = await db.getTableTypes(table, schema, options)
  interfaces.push(generateTableTypes(table, tableTypes, options))
  interfaces.push(generateTableInterface(table, tableTypes, options))
  return interfaces.join('\n\n')
}

export async function typescriptOfSchema(
  db: Database | string,
  tables: string[] = [],
  schema: string | null = null,
  options: OptionValues,
): Promise<string> {
  if (typeof db === 'string') {
    db = getDatabase(db)
  }

  if (!schema) {
    schema = db.getDefaultSchema()
  }

  const tableNames = [...tables]

  if (tableNames.length === 0) {
    const results = await db.getSchemaTables(schema)
    tableNames.push(...results)
  }

  const optionsObject = new Options(options)

  const enumTypes = generateEnumType(await db.getEnumTypes(schema), optionsObject)
  const interfacePromises = tableNames.map((table) => typescriptOfTable(db, table, schema as string, optionsObject))
  const interfaces = await Promise.all(interfacePromises)
    .then(tsOfTable => tsOfTable.join('\n\n'))

  const outputLines = ['/* eslint-disable */']
  if (optionsObject.options.writeHeader) {
    outputLines.push(buildHeader(db, tableNames, schema, optionsObject.options))
  }
  outputLines.push(enumTypes)
  outputLines.push(interfaces)

  const output = outputLines.join('\n\n')

  const formatterOption: ITFOptions = {
    replace: false,
    verify: false,
    tsconfig: true,
    tslint: true,
    editorconfig: true,
    tsfmt: true,
    vscode: false,
    tsconfigFile: null,
    tslintFile: null,
    vscodeFile: null,
    tsfmtFile: null,
  }

  const processedResult = await processString('schema.ts', output, formatterOption)
  return processedResult.dest
}

export { Database, getDatabase } from './schema'
export { Options, OptionValues }
